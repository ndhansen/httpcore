{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HTTP Core Do one thing, and do it well. Warning This documentation is a design document. The proposed package documented here does not currently exist. The HTTP Core package provides a minimal low-level HTTP client, which does one thing only. Sending HTTP requests. It does not provide any high level model abstractions over the API, does not handle redirects, multipart uploads, building authentication headers, transparent HTTP caching, URL parsing, session cookie handling, content or charset decoding, handling JSON, environment based configuration defaults, or any of that Jazz. Some things HTTP Core does do: Sending HTTP requests. Provides both sync and async interfaces. Supports HTTP/1.1 and HTTP/2. Async backend support for asyncio and trio . Automatic connection pooling. HTTP(S) proxy support. Quickstart Here's an example of making an HTTP GET request using httpcore ... async with httpcore . AsyncConnectionPool () as http : status_code , http_version , reason_phrase , headers , stream = await http . request ( method = b 'GET' , url = ( b 'https' , b 'example.org' , 433 , b '/' ), headers = [( b 'host' : b 'example.org' ), ( b 'user-agent' : 'httpcore' )] ) body = b '' async for chunk in stream : body += chunk await stream . close () print ( status_code , body ) Motivation You probably don't want to be using HTTP Core directly. It might make sense if you're writing something like a proxy service in Python, and you just want something at the lowest possible level, but more typically you'll want to use a higher level client library, such as httpx . The motivation is for httpcore to provide a reusable low-level client library, that other packages can then build on top of.","title":"Introduction"},{"location":"#http-core","text":"Do one thing, and do it well. Warning This documentation is a design document. The proposed package documented here does not currently exist. The HTTP Core package provides a minimal low-level HTTP client, which does one thing only. Sending HTTP requests. It does not provide any high level model abstractions over the API, does not handle redirects, multipart uploads, building authentication headers, transparent HTTP caching, URL parsing, session cookie handling, content or charset decoding, handling JSON, environment based configuration defaults, or any of that Jazz. Some things HTTP Core does do: Sending HTTP requests. Provides both sync and async interfaces. Supports HTTP/1.1 and HTTP/2. Async backend support for asyncio and trio . Automatic connection pooling. HTTP(S) proxy support.","title":"HTTP Core"},{"location":"#quickstart","text":"Here's an example of making an HTTP GET request using httpcore ... async with httpcore . AsyncConnectionPool () as http : status_code , http_version , reason_phrase , headers , stream = await http . request ( method = b 'GET' , url = ( b 'https' , b 'example.org' , 433 , b '/' ), headers = [( b 'host' : b 'example.org' ), ( b 'user-agent' : 'httpcore' )] ) body = b '' async for chunk in stream : body += chunk await stream . close () print ( status_code , body )","title":"Quickstart"},{"location":"#motivation","text":"You probably don't want to be using HTTP Core directly. It might make sense if you're writing something like a proxy service in Python, and you just want something at the lowest possible level, but more typically you'll want to use a higher level client library, such as httpx . The motivation is for httpcore to provide a reusable low-level client library, that other packages can then build on top of.","title":"Motivation"},{"location":"api/","text":"Developer Interface Async API Overview class httpcore. AsyncDispatchInterface ( ) The base abstract interface for sending HTTP requests. Concete implementations should subclass this class, and implement the request method. request ( self , method , url , headers=None , stream=None , timeout=None ) The interface for sending a single HTTP request, and returning a response. Parameters: method - bytes The HTTP method, such as b'GET' . url - (bytes, bytes, int, bytes) The URL as a 4-tuple of (scheme, host, port, path). headers - list of (bytes, bytes), optional Any HTTP headers to send with the request. stream - bytes async iterator, optional timeout - (float, float, float, float), all optional. A tuple of timeout values for (read, write, connect, pool acquiry) operations. close ( self ) Close the implementation, which should close any outstanding response streams, and any keep alive connections. class httpcore. AsyncConnectionPool ( ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests. Parameters: ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout. class httpcore. AsyncHTTPProxy ( proxy_url , proxy_headers=None , proxy_mode=None , ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests via an HTTP proxy. Parameters: proxy_url - (bytes, bytes, int, bytes) The URL of the proxy service as a 4-tuple of (scheme, host, port, path). proxy_headers - list of (bytes, bytes), optional An SSL context to use for verifying connections. proxy_mode - str, optional A proxy mode to operate in. May be \"DEFAULT\", \"FORWARD_ONLY\", or \"TUNNEL_ONLY\". ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout. Sync API Overview class httpcore. SyncDispatchInterface ( ) The base abstract interface for sending HTTP requests. Concete implementations should subclass this class, and implement the request method. request ( self , method , url , headers=None , stream=None , timeout=None ) The interface for sending a single HTTP request, and returning a response. Parameters: method - bytes The HTTP method, such as b'GET' . url - (bytes, bytes, int, bytes) The URL as a 4-tuple of (scheme, host, port, path). headers - list of (bytes, bytes), optional Any HTTP headers to send with the request. stream - bytes async iterator, optional timeout - (float, float, float, float), all optional. A tuple of timeout values for (read, write, connect, pool acquiry) operations. close ( self ) Close the implementation, which should close any outstanding response streams, and any keep alive connections. class httpcore. SyncConnectionPool ( ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests. Parameters: ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout. class httpcore. SyncHTTPProxy ( proxy_url , proxy_headers=None , proxy_mode=None , ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests via an HTTP proxy. Parameters: proxy_url - (bytes, bytes, int, bytes) The URL of the proxy service as a 4-tuple of (scheme, host, port, path). proxy_headers - list of (bytes, bytes), optional An SSL context to use for verifying connections. proxy_mode - str, optional A proxy mode to operate in. May be \"DEFAULT\", \"FORWARD_ONLY\", or \"TUNNEL_ONLY\". ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout.","title":"Developer Interface"},{"location":"api/#developer-interface","text":"","title":"Developer Interface"},{"location":"api/#async-api-overview","text":"class httpcore. AsyncDispatchInterface ( ) The base abstract interface for sending HTTP requests. Concete implementations should subclass this class, and implement the request method. request ( self , method , url , headers=None , stream=None , timeout=None ) The interface for sending a single HTTP request, and returning a response. Parameters: method - bytes The HTTP method, such as b'GET' . url - (bytes, bytes, int, bytes) The URL as a 4-tuple of (scheme, host, port, path). headers - list of (bytes, bytes), optional Any HTTP headers to send with the request. stream - bytes async iterator, optional timeout - (float, float, float, float), all optional. A tuple of timeout values for (read, write, connect, pool acquiry) operations. close ( self ) Close the implementation, which should close any outstanding response streams, and any keep alive connections. class httpcore. AsyncConnectionPool ( ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests. Parameters: ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout. class httpcore. AsyncHTTPProxy ( proxy_url , proxy_headers=None , proxy_mode=None , ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests via an HTTP proxy. Parameters: proxy_url - (bytes, bytes, int, bytes) The URL of the proxy service as a 4-tuple of (scheme, host, port, path). proxy_headers - list of (bytes, bytes), optional An SSL context to use for verifying connections. proxy_mode - str, optional A proxy mode to operate in. May be \"DEFAULT\", \"FORWARD_ONLY\", or \"TUNNEL_ONLY\". ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout.","title":"Async API Overview"},{"location":"api/#sync-api-overview","text":"class httpcore. SyncDispatchInterface ( ) The base abstract interface for sending HTTP requests. Concete implementations should subclass this class, and implement the request method. request ( self , method , url , headers=None , stream=None , timeout=None ) The interface for sending a single HTTP request, and returning a response. Parameters: method - bytes The HTTP method, such as b'GET' . url - (bytes, bytes, int, bytes) The URL as a 4-tuple of (scheme, host, port, path). headers - list of (bytes, bytes), optional Any HTTP headers to send with the request. stream - bytes async iterator, optional timeout - (float, float, float, float), all optional. A tuple of timeout values for (read, write, connect, pool acquiry) operations. close ( self ) Close the implementation, which should close any outstanding response streams, and any keep alive connections. class httpcore. SyncConnectionPool ( ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests. Parameters: ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout. class httpcore. SyncHTTPProxy ( proxy_url , proxy_headers=None , proxy_mode=None , ssl_context=None , max_keepalive=None , max_connections=None ) A connection pool for making HTTP requests via an HTTP proxy. Parameters: proxy_url - (bytes, bytes, int, bytes) The URL of the proxy service as a 4-tuple of (scheme, host, port, path). proxy_headers - list of (bytes, bytes), optional An SSL context to use for verifying connections. proxy_mode - str, optional A proxy mode to operate in. May be \"DEFAULT\", \"FORWARD_ONLY\", or \"TUNNEL_ONLY\". ssl_context - SSLContext, optional An SSL context to use for verifying connections. max_keepalive - int, optional The maximum number of keep alive connections to maintain in the pool. max_connections - int, optional The maximum number of HTTP connections to allow. Attempting to establish a connection beyond this limit will block for the duration specified in the pool acquiry timeout.","title":"Sync API Overview"}]}